{"version":3,"sources":["../../src/routers/index.js"],"names":["Routers","app","wsConnection","setupRouter","bind","console","log","mapRouter","post","req","res","email","body","pass","payload","token","jwt","sign","exp","Math","floor","Date","now","superSecret","status","json","code","mgs","data"],"mappings":";;;;;;;;AAAA;;;;;;;;IAGqBA,O;AACjB,qBAAYC,GAAZ,EAAiB;AAAA;;AACb,aAAKA,GAAL,GAAWA,GAAX;AACA,aAAKC,YAAL,GAAoB,IAAIA,sBAAJ,CAAiBD,GAAjB,CAApB;AACA,aAAKE,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACA,aAAKD,WAAL;AACH;;;;sCAEa;AACV,gBAAMF,MAAM,KAAKA,GAAjB;AACAI,oBAAQC,GAAR,CAAY,kBAAZ;;AAEA;AACA,gBAAIC,YAAY,CACZ,QADY,CAAhB;;AAKR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGQ;AACR;AACA;AACA;;;AAGA;AACQN,gBAAIO,IAAJ,CAAS,QAAT,EAAmB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC7B,oBAAIC,QAAQF,IAAIG,IAAJ,CAASD,KAArB;AACA,oBAAIE,OAAOJ,IAAIG,IAAJ,CAASC,IAApB;AACA,oBAAIF,UAAU,oBAAV,IAAkCE,SAAS,QAA/C,EAAyD;AACrD,wBAAMC,UAAU;AACZH,+BAAOA;AADK,qBAAhB;AAGA,wBAAII,QAAQC,IAAIC,IAAJ,CAAS;AACjBC,6BAAKC,KAAKC,KAAL,CAAWC,KAAKC,GAAL,KAAa,IAAxB,IAAiC,KAAK,EAD1B;AAEjBR;AAFiB,qBAAT,EAGTS,WAHS,CAAZ;AAIAb,wBAAIc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,8BAAM,CADW;AAEjBC,6BAAK,mBAFY;AAGjBC,8BAAMb;AAHW,qBAArB;AAKH,iBAbD,MAcK;AACDL,wBAAIc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,MAAM,CAAC,CAAR,EAAWC,KAAK,iBAAhB,EAAmCC,MAAM,IAAzC,EAArB;AACH;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACH,aAnDD;AAqDH;;;;;;kBAtHgB5B,O","file":"index.js","sourcesContent":["import wsConnection from '../wsConnections/wsConnection'\r\n\r\n\r\nexport default class Routers {\r\n    constructor(app) {\r\n        this.app = app;\r\n        this.wsConnection = new wsConnection(app);\r\n        this.setupRouter = this.setupRouter.bind(this);\r\n        this.setupRouter();\r\n    }\r\n\r\n    setupRouter() {\r\n        const app = this.app;\r\n        console.log(\"App Router init!\");\r\n\r\n        // Những router không cần check token\r\n        var mapRouter = [\r\n            '/login'\r\n        ]\r\n\r\n\r\n// router.use(function (req, res, next) {\r\n//     // Website you wish to allow to connect\r\n//     res.setHeader('Access-Control-Allow-Origin', 'http://localhost:3000');\r\n//     // Request methods you wish to allow\r\n//     res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\r\n//     // Request headers you wish to allow\r\n//     res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type');\r\n//     // Set to true if you need the website to include cookies in the requests sent\r\n//     // to the API (e.g. in case you use sessions)\r\n//     res.setHeader('Access-Control-Allow-Credentials', true);\r\n//     console.log(req.originalUrl)\r\n//     if (mapRouter.includes(req.originalUrl)) {\r\n//         next()\r\n//     } else {\r\n//         let token = req.query.token || req.body.token || req.headers['token'] || undefined\r\n//         if (token) {\r\n//             // verifies secret and checks exp\r\n//             jwt.verify(token, superSecret, function (err, decoded) {\r\n//                 if (err) {\r\n//                     return res.json({success: false, message: 'Failed to authenticate token.'});\r\n//                 } else {\r\n//                     // if everything is good, save to request for use in other routes\r\n//                     req.decoded = decoded; //log data decoded\r\n//                     console.log(decoded)\r\n//                     next();\r\n//                 }\r\n//             });\r\n//         } else {\r\n//             // if there is no token\r\n//             // return an error\r\n//             return res.status(403).json({\r\n//                 success: false,\r\n//                 message: 'No token provided.'\r\n//             });\r\n//\r\n//         }\r\n//     }\r\n// })\r\n\r\n\r\n        // router.use('/user', userController);\r\n// router.use('/tag', tagController);\r\n// router.use('/order', orderController);\r\n// router.use('/search', searchController);\r\n\r\n\r\n//Tuan add: Find One user to username and passs\r\n        app.post('/login', (req, res) => {\r\n            let email = req.body.email\r\n            let pass = req.body.pass\r\n            if (email === 'a5wap123@gmail.com' && pass === '123456') {\r\n                const payload = {\r\n                    email: email\r\n                };\r\n                let token = jwt.sign({\r\n                    exp: Math.floor(Date.now() / 1000) + (60 * 60),\r\n                    payload\r\n                }, superSecret);\r\n                res.status(200).json({\r\n                    code: 1,\r\n                    mgs: 'Enjoy your token!',\r\n                    data: token\r\n                });\r\n            }\r\n            else {\r\n                res.status(403).json({code: -1, mgs: 'User not found.', data: null});\r\n            }\r\n\r\n\r\n            // User.findOne({email:email},(err,user)=>{\r\n            //     if (err) {\r\n            //         res.json({code:0,mgs:'thorw error',data:null})\r\n            //     }\r\n            //     if(!user){\r\n            //         res.json({ code: -1, mgs: 'User not found.' ,data:null});\r\n            //     }else if (user) {\r\n            //         if (user.password != pass) {\r\n            //             res.json({ code: -2, mgs: 'Wrong password' ,data:null});\r\n            //           } else {\r\n\r\n            //             // if user is found and password is right\r\n            //             // create a token with only our given payload\r\n            //         // we don't want to pass in the entire user since that has the password\r\n            //         const payload = {\r\n            //           email: user.email\r\n            //         };\r\n            //         var token = jwt.sign(payload, src.get('superSecret'), {\r\n            //             expiresInMinutes: 1440 // expires in 24 hours\r\n            //           });\r\n            //           res.json({\r\n            //             code: 1,\r\n            //             mgs: 'Enjoy your token!',\r\n            //             data:token\r\n            //           });\r\n            //     }\r\n            //     }\r\n\r\n            // })\r\n        })\r\n\r\n    }\r\n}\r\n\r\n\r\n"]}