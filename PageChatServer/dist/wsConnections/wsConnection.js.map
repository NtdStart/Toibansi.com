{"version":3,"sources":["../../src/wsConnections/wsConnection.js"],"names":["wsConnection","app","connections","didLoad","msg","messageObject","JSON","parse","err","console","log","obj","forEach","con","key","ws","send","message","stringify","socketId","action","_","get","payload","sendAll","wss","on","ObjectID","toString","clientConnection","_id","userId","isAuthenticated","set","decodeMesasge","doTheJob","closeConnection","remove"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;;;;;;;IAEqBA,Y;AAEjB,0BAAYC,GAAZ,EAAiB;AAAA;;AACb,aAAKA,GAAL,GAAWA,GAAX;AACA,aAAKC,WAAL,GAAmB,4BAAnB;AACA,aAAKC,OAAL;AACH;;;;sCAEaC,G,EAAK;AACf,gBAAIC,gBAAgB,IAApB;AACA,gBAAI;AACAA,gCAAgBC,KAAKC,KAAL,CAAWH,GAAX,CAAhB;AACH,aAFD,CAGA,OAAOI,GAAP,EAAY;AACRC,wBAAQC,GAAR,CAAY,mCAAZ,EAAiDN,GAAjD;AACH;AACD,mBAAOC,aAAP;AACH;;;gCAEOM,G,EAAK;AAAA;;AACT;AACA,iBAAKT,WAAL,CAAiBU,OAAjB,CAAyB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACnC,oBAAMC,KAAKF,IAAIE,EAAf;AACA,sBAAKC,IAAL,CAAUD,EAAV,EAAcJ,GAAd;AACH,aAHD;AAIH;;;6BAEII,E,EAAIJ,G,EAAK;AACV,gBAAMM,UAAUX,KAAKY,SAAL,CAAeP,GAAf,CAAhB;AACAI,eAAGC,IAAH,CAAQC,OAAR;AACH;;;iCAEQE,Q,EAAUf,G,EAAK;AACpB,gBAAMgB,SAASC,iBAAEC,GAAF,CAAMlB,GAAN,EAAW,QAAX,CAAf;AACA,gBAAMmB,UAAUF,iBAAEC,GAAF,CAAMlB,GAAN,EAAW,SAAX,CAAhB;;AAEA,oBAAQgB,MAAR;AACI,qBAAK,WAAL;AACI,yBAAKI,OAAL,CAAaD,OAAb;AACA;AACJ;AACI;AALR;AAOH;;;kCAES;AAAA;;AACN,iBAAKtB,GAAL,CAASwB,GAAT,CAAaC,EAAb,CAAgB,YAAhB,EAA8B,UAACX,EAAD,EAAQ;AAClC,oBAAMI,WAAW,IAAIQ,iBAAJ,GAAeC,QAAf,EAAjB;AACAnB,wBAAQC,GAAR,CAAY,6CAAZ,EAA2DS,QAA3D;AACA,oBAAMU,mBAAmB;AACrBC,8BAAQX,QADa;AAErBJ,wBAAIA,EAFiB;AAGrBgB,4BAAQ,IAHa;AAIrBC,qCAAiB;AAErB;AANyB,iBAAzB,CAOA,OAAK9B,WAAL,GAAmB,OAAKA,WAAL,CAAiB+B,GAAjB,CAAqBd,QAArB,EAA+BU,gBAA/B,CAAnB;AACA;AACAd,mBAAGW,EAAH,CAAM,SAAN,EAAiB,UAACtB,GAAD,EAAS;AACtB,wBAAMa,UAAU,OAAKiB,aAAL,CAAmB9B,GAAnB,CAAhB;AACA,2BAAK+B,QAAL,CAAchB,QAAd,EAAwBF,OAAxB;AACH,iBAHD;;AAKAF,mBAAGW,EAAH,CAAM,OAAN,EAAe,YAAM;AACjB;AACA,wBAAMU,kBAAkB,OAAKlC,WAAL,CAAiBoB,GAAjB,CAAqBH,QAArB,CAAxB;AACA;AACA,2BAAKjB,WAAL,GAAmB,OAAKA,WAAL,CAAiBmC,MAAjB,CAAwBlB,QAAxB,CAAnB;AACH,iBALD;AAMH,aAvBD;AAwBH;;;;;;kBAtEgBnB,Y","file":"wsConnection.js","sourcesContent":["import {OrderedMap} from 'immutable'\nimport {ObjectID} from 'mongodb'\nimport _ from 'lodash'\n\nexport default class wsConnection {\n\n    constructor(app) {\n        this.app = app;\n        this.connections = OrderedMap();\n        this.didLoad();\n    }\n\n    decodeMesasge(msg) {\n        let messageObject = null;\n        try {\n            messageObject = JSON.parse(msg);\n        }\n        catch (err) {\n            console.log(\"An error decode the socket mesage\", msg);\n        }\n        return messageObject;\n    }\n\n    sendAll(obj) {\n        // send socket messages to all clients.\n        this.connections.forEach((con, key) => {\n            const ws = con.ws;\n            this.send(ws, obj);\n        });\n    }\n\n    send(ws, obj) {\n        const message = JSON.stringify(obj);\n        ws.send(message);\n    }\n\n    doTheJob(socketId, msg) {\n        const action = _.get(msg, 'action');\n        const payload = _.get(msg, 'payload');\n\n        switch (action) {\n            case 'broadcast':\n                this.sendAll(payload);\n                break;\n            default:\n                break;\n        }\n    }\n\n    didLoad() {\n        this.app.wss.on('connection', (ws) => {\n            const socketId = new ObjectID().toString();\n            console.log(\"Someone connected to the server via socket.\", socketId)\n            const clientConnection = {\n                _id: `${socketId}`,\n                ws: ws,\n                userId: null,\n                isAuthenticated: false,\n            }\n            // save this connection client to cache.\n            this.connections = this.connections.set(socketId, clientConnection);\n            // listen any message from websocket client.\n            ws.on('message', (msg) => {\n                const message = this.decodeMesasge(msg);\n                this.doTheJob(socketId, message);\n            });\n\n            ws.on('close', () => {\n                //console.log(\"Someone disconnected to the server\", socketId);\n                const closeConnection = this.connections.get(socketId);\n                // let remove this socket client from the cache collection.\n                this.connections = this.connections.remove(socketId);\n            });\n        });\n    }\n}"]}