/// <reference types="react" />
import { CSSProperties, Dict } from 'jsxstyle-utils';
import * as React from 'react';
export { CSSProperties };
export declare const cache: {
  reset(): void;
  injectOptions(
    options?:
      | {
          onInsertRule?:
            | ((rule: string, props?: {} | undefined) => boolean | void)
            | undefined;
          pretty?: boolean | undefined;
          getClassName?:
            | ((key: string, props?: {} | undefined) => string)
            | undefined;
        }
      | undefined
  ): void;
  getClassName(
    props: Dict<any>,
    classNameProp?: string | undefined
  ): string | null;
};
export interface StyleProps {
  className?: string;
  style?: React.CSSProperties;
}
export declare type AnyComponent<Props extends StyleProps> =
  | keyof JSX.IntrinsicElements
  | React.ComponentType<Props>;
export declare type JsxstyleProps<ComponentProps> = {
  component?: AnyComponent<ComponentProps>;
  mediaQueries?: Dict<string>;
  props?: ComponentProps;
} & StyleProps &
  CSSProperties;
export declare const Box: {
  new <P>(props: JsxstyleProps<P>): {
    className: string | null;
    component: AnyComponent<JsxstyleProps<P>>;
    componentWillReceiveProps(props: JsxstyleProps<P>): void;
    render(): JSX.Element;
    setState<K extends never>(
      state:
        | {}
        | ((
            prevState: Readonly<{}>,
            props: JsxstyleProps<P>
          ) => {} | Pick<{}, K> | null)
        | Pick<{}, K>
        | null,
      callback?: (() => void) | undefined
    ): void;
    forceUpdate(callBack?: (() => void) | undefined): void;
    props: Readonly<{
      children?: React.ReactNode;
    }> &
      Readonly<JsxstyleProps<P>>;
    state: Readonly<{}>;
    context: any;
    refs: {
      [key: string]: React.ReactInstance;
    };
  };
  defaultProps: Dict<string | number> | undefined;
  displayName: string;
};
export declare const Block: {
  new <P>(props: JsxstyleProps<P>): {
    className: string | null;
    component: AnyComponent<JsxstyleProps<P>>;
    componentWillReceiveProps(props: JsxstyleProps<P>): void;
    render(): JSX.Element;
    setState<K extends never>(
      state:
        | {}
        | ((
            prevState: Readonly<{}>,
            props: JsxstyleProps<P>
          ) => {} | Pick<{}, K> | null)
        | Pick<{}, K>
        | null,
      callback?: (() => void) | undefined
    ): void;
    forceUpdate(callBack?: (() => void) | undefined): void;
    props: Readonly<{
      children?: React.ReactNode;
    }> &
      Readonly<JsxstyleProps<P>>;
    state: Readonly<{}>;
    context: any;
    refs: {
      [key: string]: React.ReactInstance;
    };
  };
  defaultProps: Dict<string | number> | undefined;
  displayName: string;
};
export declare const Inline: {
  new <P>(props: JsxstyleProps<P>): {
    className: string | null;
    component: AnyComponent<JsxstyleProps<P>>;
    componentWillReceiveProps(props: JsxstyleProps<P>): void;
    render(): JSX.Element;
    setState<K extends never>(
      state:
        | {}
        | ((
            prevState: Readonly<{}>,
            props: JsxstyleProps<P>
          ) => {} | Pick<{}, K> | null)
        | Pick<{}, K>
        | null,
      callback?: (() => void) | undefined
    ): void;
    forceUpdate(callBack?: (() => void) | undefined): void;
    props: Readonly<{
      children?: React.ReactNode;
    }> &
      Readonly<JsxstyleProps<P>>;
    state: Readonly<{}>;
    context: any;
    refs: {
      [key: string]: React.ReactInstance;
    };
  };
  defaultProps: Dict<string | number> | undefined;
  displayName: string;
};
export declare const InlineBlock: {
  new <P>(props: JsxstyleProps<P>): {
    className: string | null;
    component: AnyComponent<JsxstyleProps<P>>;
    componentWillReceiveProps(props: JsxstyleProps<P>): void;
    render(): JSX.Element;
    setState<K extends never>(
      state:
        | {}
        | ((
            prevState: Readonly<{}>,
            props: JsxstyleProps<P>
          ) => {} | Pick<{}, K> | null)
        | Pick<{}, K>
        | null,
      callback?: (() => void) | undefined
    ): void;
    forceUpdate(callBack?: (() => void) | undefined): void;
    props: Readonly<{
      children?: React.ReactNode;
    }> &
      Readonly<JsxstyleProps<P>>;
    state: Readonly<{}>;
    context: any;
    refs: {
      [key: string]: React.ReactInstance;
    };
  };
  defaultProps: Dict<string | number> | undefined;
  displayName: string;
};
export declare const Row: {
  new <P>(props: JsxstyleProps<P>): {
    className: string | null;
    component: AnyComponent<JsxstyleProps<P>>;
    componentWillReceiveProps(props: JsxstyleProps<P>): void;
    render(): JSX.Element;
    setState<K extends never>(
      state:
        | {}
        | ((
            prevState: Readonly<{}>,
            props: JsxstyleProps<P>
          ) => {} | Pick<{}, K> | null)
        | Pick<{}, K>
        | null,
      callback?: (() => void) | undefined
    ): void;
    forceUpdate(callBack?: (() => void) | undefined): void;
    props: Readonly<{
      children?: React.ReactNode;
    }> &
      Readonly<JsxstyleProps<P>>;
    state: Readonly<{}>;
    context: any;
    refs: {
      [key: string]: React.ReactInstance;
    };
  };
  defaultProps: Dict<string | number> | undefined;
  displayName: string;
};
export declare const Col: {
  new <P>(props: JsxstyleProps<P>): {
    className: string | null;
    component: AnyComponent<JsxstyleProps<P>>;
    componentWillReceiveProps(props: JsxstyleProps<P>): void;
    render(): JSX.Element;
    setState<K extends never>(
      state:
        | {}
        | ((
            prevState: Readonly<{}>,
            props: JsxstyleProps<P>
          ) => {} | Pick<{}, K> | null)
        | Pick<{}, K>
        | null,
      callback?: (() => void) | undefined
    ): void;
    forceUpdate(callBack?: (() => void) | undefined): void;
    props: Readonly<{
      children?: React.ReactNode;
    }> &
      Readonly<JsxstyleProps<P>>;
    state: Readonly<{}>;
    context: any;
    refs: {
      [key: string]: React.ReactInstance;
    };
  };
  defaultProps: Dict<string | number> | undefined;
  displayName: string;
};
export declare const Grid: {
  new <P>(props: JsxstyleProps<P>): {
    className: string | null;
    component: AnyComponent<JsxstyleProps<P>>;
    componentWillReceiveProps(props: JsxstyleProps<P>): void;
    render(): JSX.Element;
    setState<K extends never>(
      state:
        | {}
        | ((
            prevState: Readonly<{}>,
            props: JsxstyleProps<P>
          ) => {} | Pick<{}, K> | null)
        | Pick<{}, K>
        | null,
      callback?: (() => void) | undefined
    ): void;
    forceUpdate(callBack?: (() => void) | undefined): void;
    props: Readonly<{
      children?: React.ReactNode;
    }> &
      Readonly<JsxstyleProps<P>>;
    state: Readonly<{}>;
    context: any;
    refs: {
      [key: string]: React.ReactInstance;
    };
  };
  defaultProps: Dict<string | number> | undefined;
  displayName: string;
};
export declare const Table: {
  new (props: {}, context?: any): {
    componentWillMount(): void;
    render(): JSX.Element;
    setState<K extends never>(
      state:
        | {}
        | ((prevState: Readonly<{}>, props: {}) => {} | Pick<{}, K> | null)
        | Pick<{}, K>
        | null,
      callback?: (() => void) | undefined
    ): void;
    forceUpdate(callBack?: (() => void) | undefined): void;
    props: Readonly<{
      children?: React.ReactNode;
    }> &
      Readonly<{}>;
    state: Readonly<{}>;
    context: any;
    refs: {
      [key: string]: React.ReactInstance;
    };
  };
  displayName: string;
  defaultProps: {};
};
export declare const TableRow: {
  new (props: {}, context?: any): {
    componentWillMount(): void;
    render(): JSX.Element;
    setState<K extends never>(
      state:
        | {}
        | ((prevState: Readonly<{}>, props: {}) => {} | Pick<{}, K> | null)
        | Pick<{}, K>
        | null,
      callback?: (() => void) | undefined
    ): void;
    forceUpdate(callBack?: (() => void) | undefined): void;
    props: Readonly<{
      children?: React.ReactNode;
    }> &
      Readonly<{}>;
    state: Readonly<{}>;
    context: any;
    refs: {
      [key: string]: React.ReactInstance;
    };
  };
  displayName: string;
  defaultProps: {};
};
export declare const TableCell: {
  new (props: {}, context?: any): {
    componentWillMount(): void;
    render(): JSX.Element;
    setState<K extends never>(
      state:
        | {}
        | ((prevState: Readonly<{}>, props: {}) => {} | Pick<{}, K> | null)
        | Pick<{}, K>
        | null,
      callback?: (() => void) | undefined
    ): void;
    forceUpdate(callBack?: (() => void) | undefined): void;
    props: Readonly<{
      children?: React.ReactNode;
    }> &
      Readonly<{}>;
    state: Readonly<{}>;
    context: any;
    refs: {
      [key: string]: React.ReactInstance;
    };
  };
  displayName: string;
  defaultProps: {};
};
export declare const Flex: {
  new (props: {}, context?: any): {
    componentWillMount(): void;
    render(): JSX.Element;
    setState<K extends never>(
      state:
        | {}
        | ((prevState: Readonly<{}>, props: {}) => {} | Pick<{}, K> | null)
        | Pick<{}, K>
        | null,
      callback?: (() => void) | undefined
    ): void;
    forceUpdate(callBack?: (() => void) | undefined): void;
    props: Readonly<{
      children?: React.ReactNode;
    }> &
      Readonly<{}>;
    state: Readonly<{}>;
    context: any;
    refs: {
      [key: string]: React.ReactInstance;
    };
  };
  displayName: string;
  defaultProps: {};
};
export declare const InlineFlex: {
  new (props: {}, context?: any): {
    componentWillMount(): void;
    render(): JSX.Element;
    setState<K extends never>(
      state:
        | {}
        | ((prevState: Readonly<{}>, props: {}) => {} | Pick<{}, K> | null)
        | Pick<{}, K>
        | null,
      callback?: (() => void) | undefined
    ): void;
    forceUpdate(callBack?: (() => void) | undefined): void;
    props: Readonly<{
      children?: React.ReactNode;
    }> &
      Readonly<{}>;
    state: Readonly<{}>;
    context: any;
    refs: {
      [key: string]: React.ReactInstance;
    };
  };
  displayName: string;
  defaultProps: {};
};
